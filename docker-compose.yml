# docker-compose.yml
# Configuração para desenvolvimento local com a API Flask

version: '3.8'

services:
  # Serviço principal da API
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: flask-api:latest
    container_name: flask-api-container
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - FLASK_RUN_HOST=0.0.0.0
      - FLASK_RUN_PORT=5000
      - DATABASE_URL=sqlite:///data/database.db
    volumes:
      # Mount para desenvolvimento (hot reload)
      - ./api.py:/app/api.py:ro
      - ./test_api.py:/app/test_api.py:ro
      - ./init_db.py:/app/init_db.py:ro
      # Volume para persistência do banco de dados
      - database-data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/', timeout=2)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - api-network

  # Serviço para executar testes
  test:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: flask-api:latest
    container_name: flask-api-test
    command: ["test"]
    volumes:
      - ./api.py:/app/api.py:ro
      - ./test_api.py:/app/test_api.py:ro
    depends_on:
      - api
    networks:
      - api-network
    profiles:
      - testing

  # Nginx reverso proxy (opcional para produção)
  nginx:
    image: nginx:alpine
    container_name: flask-api-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - api-network
    profiles:
      - production

# Rede isolada para os serviços
networks:
  api-network:
    driver: bridge
    name: flask-api-network

# Volumes para persistência do banco de dados
volumes:
  database-data:
    driver: local
    name: flask-api-database
  api-data:
    driver: local
    name: flask-api-data